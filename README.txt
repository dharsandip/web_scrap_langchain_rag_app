This is a Generative AI project for building a Django application for extracting answers of various queries from some web page.
For this project Langchain framework, RAG (Retrieval-Augmented Generation), OpenAI Chat model, OpenAI Embeddings, FAISS (Facebook AI Similarity Search), Web Scraping (using WebBaseLoader in Langchain) etc. are used. Following are the steps: 1. Data are scraped from the web page 2. Then it is splitted into chunks of text data 3. It is converted into vector representation (by transforming text data into embeddings which are numeric representations that capture the semantic meaning of the text). 4. Then the user query is also converted into an embedding and the system compares the query embedding with the stored document embeddings in vectorstore using similarity search. It identifies and retrieves the chunks whose embeddings are most similar and relevant to the query embedding. 5. The retrieved text chunks along with the initial user query are fed into LLM (in our case it is ChatOpenAI). Then it generates a suitable response to the userâ€™s query. In the App, user needs to enter the URL of the web page and also the Query and then just click on the Submit button. It will display both the query and also the extracted answer/information. The App has been thoroughly tested with a leading car manufacturer's News web page and all the queries have been answered correctly.
